<?php

namespace AppBundle\Entity;

/**
 * ParticipationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipationRepository extends \Doctrine\ORM\EntityRepository
{
    function getParticipationForPromo($id){
        $query = $this->createQueryBuilder('s');
        $query = $query
            ->select('s')
            ->where('s.promo = :id')->setParameter('id',$id)
            ->andWhere('s.isValidated = 1')
            ->leftJoin('s.eleve','t')->addSelect('t')
            ->andWhere('NOT (t.roles LIKE :roles)')->setParameter('roles', '%ROLE_ADMIN%');
        return $query->orderBy('s.score','DESC')->getQuery()->getResult();
    }
    function findElevesPerOrganization($slug){
        $query = $this->createQueryBuilder('p');
        return $query
            ->leftJoin('p.promo','c')
            ->leftJoin('p.eleve','t')
            ->where('c.slug = :slug')
            ->andWhere('p.isValidated = 1')
            ->setParameter('slug',$slug)
            ->select('count(t) as nb')
            ->addSelect("(case when t.organisation is not null then upper(t.organisation) else 'Unspecified' end) as organization")
            ->groupBy('t.organisation')
            ->orderBy('nb','DESC')
            ->getQuery()->getResult();
    }

    function getParticipantsEmails($promoId){
        $query = $this->createQueryBuilder('p');
        return $query
            ->leftJoin('p.promo','c')
            ->where('c.id = :promoId')
            ->andWhere('p.isValidated = true')
            ->setParameter('promoId',$promoId)
            ->leftJoin('p.eleve','t')
            ->select('t.email')
            ->andWhere('NOT (t.roles LIKE :roles)')->setParameter('roles', '%ROLE_ADMIN%')
            ->getQuery()->getResult();
    }
}